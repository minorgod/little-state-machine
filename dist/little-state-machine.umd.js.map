{"version":3,"file":"little-state-machine.umd.js","sources":["../src/constants.ts","../src/logic/storeFactory.ts","../src/context/index.tsx","../src/logic/createStore.tsx","../src/hooks/index.ts"],"sourcesContent":["export const STORE_DEFAULT_NAME = '__LSM__';\nexport const STORE_ACTION_NAME = '__LSM_NAME__';\nexport const PERSIST_OPTION = {\n  NONE: 'none',\n  ACTION: 'action',\n  UNLOAD: 'beforeUnload',\n} as const;\n","import { PERSIST_OPTION, STORE_DEFAULT_NAME } from '../constants';\nimport { GlobalState, StateMachineOptions } from '../types';\n\nfunction StoreFactory() {\n  let options: StateMachineOptions = {\n    name: STORE_DEFAULT_NAME,\n    middleWares: [],\n    persist: PERSIST_OPTION.ACTION,\n  };\n  let state: GlobalState = {};\n\n  try {\n    options.storageType =\n      typeof sessionStorage !== 'undefined' ? window.sessionStorage : undefined;\n  } catch {}\n\n  return {\n    updateStore(defaultValues: GlobalState) {\n      try {\n        state =\n          (options.storageType &&\n            JSON.parse(options.storageType.getItem(options.name!) || '')) ||\n          defaultValues;\n      } catch {\n        state = defaultValues;\n      }\n    },\n    saveStore() {\n      options.storageType &&\n        options.storageType.setItem(options.name!, JSON.stringify(state));\n    },\n    get state() {\n      return state;\n    },\n    set state(value) {\n      state = value;\n    },\n    get options() {\n      return options;\n    },\n    set options(value) {\n      options = value;\n    },\n  };\n}\n\nexport default StoreFactory();\n","'use client'; // needed for Next 13 compatibility\nimport * as React from 'react';\nimport storeFactory from '../logic/storeFactory';\nimport { StateMachineContextValue } from '../types';\nimport { PERSIST_OPTION } from '../constants';\n\nconst StateMachineContext = React.createContext<StateMachineContextValue>(\n  undefined as any,\n);\n\nexport const StateMachineProvider = ({ children } : React.PropsWithChildren) => {\n  const [state, setState] = React.useState(storeFactory.state);\n\n  React.useEffect(() => {\n    if (storeFactory.options.persist === PERSIST_OPTION.UNLOAD) {\n      window.onbeforeunload = () => storeFactory.saveStore();\n      storeFactory.options.storageType &&\n        storeFactory.options.storageType.removeItem(storeFactory.options.name!);\n    }\n  }, []);\n\n  return (\n    <StateMachineContext.Provider value={{ state, setState }}>\n      {children}\n    </StateMachineContext.Provider>\n  );\n};\n\nexport const useStateMachineContext = () =>\n  React.useContext<StateMachineContextValue>(StateMachineContext);\n","import storeFactory from './storeFactory';\nimport {\n  StateMachineOptions,\n  GlobalState,\n} from '../types';\n\nexport function createStore(\n  defaultState: GlobalState,\n  options?: StateMachineOptions,\n) {\n  if (options) {\n    storeFactory.options = {\n      ...storeFactory.options,\n      ...options,\n    };\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof window !== 'undefined') {\n      window.__LSM_NAME__ = storeFactory.options.name;\n      window.__LSM_RESET__ = () =>\n        storeFactory.options.storageType &&\n        storeFactory.options.storageType.removeItem(storeFactory.options.name!);\n    }\n  }\n\n  storeFactory.updateStore(defaultState);\n}\n","import {ActionsOutput, AnyActions, AnyCallback, GlobalState} from \"../types\";\nimport {useStateMachineContext} from \"../context\";\nimport * as React from \"react\";\nimport storeFactory from \"../logic/storeFactory\";\nimport {PERSIST_OPTION, STORE_ACTION_NAME} from \"../constants\";\n\n\nconst actionTemplate =\n    <TCallback extends AnyCallback>(\n        setState: React.Dispatch<React.SetStateAction<GlobalState>>,\n        callback: TCallback,\n    ) =>\n        (payload: Parameters<TCallback>[1], options?: { skipRender: boolean }) => {\n            if (process.env.NODE_ENV !== 'production') {\n                window[STORE_ACTION_NAME] = callback.name;\n            }\n\n            storeFactory.state = callback(storeFactory.state, payload);\n\n            if (storeFactory.options.middleWares) {\n                storeFactory.state = storeFactory.options.middleWares.reduce(\n                    (currentValue, currentFunction) =>\n                        currentFunction(currentValue, callback.name, payload) || currentValue,\n                    storeFactory.state,\n                );\n            }\n\n            (!options || !options.skipRender) && setState(storeFactory.state);\n\n            if (storeFactory.options.persist === PERSIST_OPTION.ACTION) {\n                storeFactory.saveStore();\n            }\n        };\nexport function useStateMachine<\n    TCallback extends AnyCallback,\n    TActions extends AnyActions<TCallback>,\n>(\n    actions?: TActions,\n): {\n    actions: ActionsOutput<TCallback, TActions>;\n    state: GlobalState;\n    getState: () => GlobalState;\n} {\n    const { state, setState } = useStateMachineContext();\n    const actionsRef = React.useRef(\n        Object.entries(actions || {}).reduce(\n            (previous, [key, callback]) =>\n                Object.assign({}, previous, {\n                    [key]: actionTemplate(setState, callback),\n                }),\n            {} as ActionsOutput<TCallback, TActions>,\n        ),\n    );\n\n    return {\n        actions: actionsRef.current,\n        state,\n        getState: React.useCallback(() => storeFactory.state, []),\n    };\n}\n"],"names":["PERSIST_OPTION","storeFactory","options","name","middleWares","persist","state","storageType","sessionStorage","window","undefined","_unused","updateStore","defaultValues","JSON","parse","getItem","_unused2","saveStore","setItem","stringify","value","StoreFactory","StateMachineContext","React","createContext","useStateMachineContext","useContext","_ref","children","_React$useState","useState","setState","useEffect","onbeforeunload","removeItem","createElement","Provider","defaultState","_extends","actions","_useStateMachineConte","useRef","Object","entries","reduce","previous","_Object$assign","assign","callback","payload","currentValue","currentFunction","skipRender","actionTemplate","current","getState","useCallback"],"mappings":"qjBAEaA,EAEH,SC0CVC,EA3CA,WACE,IAAIC,EAA+B,CACjCC,KDL8B,UCM9BC,YAAa,GACbC,QAASL,GAEPM,EAAqB,CAAA,EAEzB,IACEJ,EAAQK,YACoB,oBAAnBC,eAAiCC,OAAOD,oBAAiBE,CACnE,CAAC,MAAAC,IAEF,MAAO,CACLC,YAAW,SAACC,GACV,IACEP,EACGJ,EAAQK,aACPO,KAAKC,MAAMb,EAAQK,YAAYS,QAAQd,EAAQC,OAAU,KAC3DU,CACH,CAAC,MAAAI,GACAX,EAAQO,CACT,CACH,EACAK,UAASA,WACPhB,EAAQK,aACNL,EAAQK,YAAYY,QAAQjB,EAAQC,KAAOW,KAAKM,UAAUd,GAC9D,EACIA,YACF,OAAOA,CACT,EACIA,UAAMe,GACRf,EAAQe,CACV,EACInB,cACF,OAAOA,CACT,EACIA,YAAQmB,GACVnB,EAAUmB,CACZ,EAEJ,CAEeC,GCxCTC,EAAsBC,EAAMC,mBAChCf,GAqBWgB,EAAyB,kBACpCF,EAAMG,WAAqCJ,EAAoB,6PAnB7B,SAAHK,GAAM,IAAAC,EAAQD,EAARC,SACrCC,EAA0BN,EAAMO,SAAS9B,EAAaK,OAA/CA,EAAKwB,KAAEE,EAAQF,EAEtBN,GAQA,OARAA,EAAMS,UAAU,WFRR,iBESFhC,EAAaC,QAAQG,UACvBI,OAAOyB,eAAiB,kBAAMjC,EAAaiB,WAAW,EACtDjB,EAAaC,QAAQK,aACnBN,EAAaC,QAAQK,YAAY4B,WAAWlC,EAAaC,QAAQC,MAEvE,EAAG,IAGDqB,EAACY,cAAAb,EAAoBc,UAAShB,MAAO,CAAEf,MAAAA,EAAO0B,SAAAA,IAC3CH,EAGP,yBCnBES,EACApC,GAEIA,IACFD,EAAaC,QAAOqC,KACftC,EAAaC,QACbA,IAaPD,EAAaW,YAAY0B,EAC3B,oBCMM,SAIFE,GAMA,IAAAC,EAA4Bf,IAApBpB,EAAKmC,EAALnC,MAAO0B,EAAQS,EAART,SAWf,MAAO,CACHQ,QAXehB,EAAMkB,OACrBC,OAAOC,QAAQJ,GAAW,IAAIK,OAC1B,SAACC,EAAQlB,OAAAmB,EACL,OAAAJ,OAAOK,OAAO,CAAE,EAAEF,IAAQC,EAAA,CAAA,GADfnB,EAAEqB,IAtCzB,SACIjB,EACAiB,GAAmB,OAElBC,SAAAA,EAAmChD,GAKhCD,EAAaK,MAAQ2C,EAAShD,EAAaK,MAAO4C,GAE9CjD,EAAaC,QAAQE,cACrBH,EAAaK,MAAQL,EAAaC,QAAQE,YAAYyC,OAClD,SAACM,EAAcC,GAAe,OAC1BA,EAAgBD,EAAcF,EAAS9C,KAAM+C,IAAYC,CAAY,EACzElD,EAAaK,UAInBJ,IAAYA,EAAQmD,aAAerB,EAAS/B,EAAaK,OAEvDL,EAAaC,QAAQG,UAAYL,GACjCC,EAAaiB,WAErB,CAAC,CAgBkBoC,CAAetB,EAFLJ,EACrB,IAC6CmB,GAC3C,EACN,CAAA,IAKgBQ,QACpBjD,MAAAA,EACAkD,SAAUhC,EAAMiC,YAAY,WAAA,OAAMxD,EAAaK,KAAK,EAAE,IAE9D"}